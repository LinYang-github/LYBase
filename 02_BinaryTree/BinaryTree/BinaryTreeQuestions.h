#ifndef BinaryTreeQuestions_h__
#define BinaryTreeQuestions_h__

#include "BinaryTreeStruct.h"

class BinaryTreeQuestions
{
public:
	BinaryTreeQuestions(void);
	~BinaryTreeQuestions(void);

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	找出二叉树中最远节点的距离. </summary>
	///
	/// <remarks>	LinY, 2017/5/12. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static int MaxDistance(BinTree BT);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	判断一个二叉树是否为完全二叉树. </summary>
	///
	/// <remarks>	LinY, 2017/5/12. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static bool IsFullBinaryTree(BinTree BT);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	求二叉树中两个节点的最近公共祖先-搜索二叉树. </summary>
	///
	/// 搜索二叉树始终满足根节点大于左孩子，小于右孩子。
	/// 他们的公共祖先的key值就必然介于两个节点之间
	/// 
	/// <remarks>	LinY, 2017/5/12. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static BinTree FindParent_SearchTree(BinTree Node1, BinTree Node2, BinTree Root);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	求二叉树中两个节点的最近公共祖先. </summary>
	///
	/// pair结构体中保存的两个对象，第一个是当前节点，另外一个是在它左右子树中找到的两个节点个数，包括它自己
	/// 一旦当某次发现，该节点的second为2，表明该节点就是我们要找的最近父节点
	/// 
	/// <remarks>	LinY, 2017/5/12. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static BinTree NearestParent(BinTree Node1, BinTree Node2, BinTree Root);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	将二叉搜索树转换成一个排序的双向链表. </summary>
	///
	/// 让左孩子指针指向该节点的前一个节点，右孩子指向下一个节点
	/// 
	/// <remarks>	LinY, 2017/5/12. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static BinTree BinaryTreeToList(BinTree Root);
private:
	static int MaxDistance_p(BinTree Curr, int& MaxDis);
	static std::pair<BinTree, int> NearestParent_p(BinTree Root, BinTree Node1, BinTree Node2);
	static void BinaryTreeToList_p(BinTree Root, BinTree & Prev);
};


#endif // BinaryTreeQuestions_h__
